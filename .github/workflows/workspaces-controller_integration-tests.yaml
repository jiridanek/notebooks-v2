name: "workspaces/controller: integration-tests"

permissions: {}

on:
  push:
    branches: [ "main", "notebooks-v2", "v*-branch" ]
  pull_request:
    paths: [ "workspaces/controller/**" ]
    branches: [ "main", "notebooks-v2", "v*-branch" ]

env:
  # Can be removed to always install the latest stable release.
  K0S_VERSION: v1.30.0+k0s.0

jobs:

  "integration-tests":
    runs-on: ubuntu-latest
    strategy:
      matrix:
        include:
          - img: "workspace-controller:local"

    steps:

      - uses: actions/checkout@v4

      # https://docs.k0sproject.io/v1.30.0+k0s.0/install/#install-k0s
      - name: Start k0s
        run: |
          curl --proto '=https' --tlsv1.2 -sSf https://get.k0s.sh | sudo sh
          sudo k0s install controller --no-taints --enable-worker --disable-components=konnectivity-server
          sudo systemctl daemon-reload
          sudo k0s start

      - name: Build Notebook Controller Image
        run: make docker-build
        env:
          IMG: "${{ matrix.img }}"
        working-directory: workspaces/controller

      # https://docs.k0sproject.io/v1.30.0+k0s.0/airgap-install/#1-create-your-own-image-bundle-optional
      - name: Deploy image bundle into k0s
        run: |
          sudo mkdir -p /var/lib/k0s/images
          sudo docker image save "${{ matrix.img }}" -o /var/lib/k0s/images/bundle_file

      - name: Wait for k0s readiness
        run: |
          # install kubeconfig
          mkdir -p $HOME/.kube
          until sudo k0s kubeconfig admin >$HOME/.kube/config; do sleep 1; done

          # wait for nodes
          until kubectl wait --for=condition=Ready nodes --all; do
            sleep 3
          done

      - run: kubectl describe nodes

      - name: Build & Apply manifests
        run: |
          # don't try to rebuild manifests before deploy
          make --assume-old=manifests deploy

          # wait for controller pod to come up, print `kubectl describe` to help diagnose problems
          thence=$(date +%s)
          until kubectl wait pods -n workspace-controller-system -l control-plane=controller-manager --for=condition=Ready --timeout=10s; do
            # print some helpful status in case the pod is not coming up
            kubectl describe deployments -n workspace-controller-system
            kubectl describe pods -n workspace-controller-system

            now=$(date +%s)
            duration=$(( $now - $thence ))
            if (( $duration > 300 )); then exit 1; fi

            sleep 5
          done
          kubectl describe pods -n workspace-controller-system
        env:
          IMG: "${{ matrix.img }}"
        working-directory: workspaces/controller

      - name: Print controller logs
        if: "${{ ! cancelled() }}"
        run: kubectl logs -l control-plane=controller-manager -n workspace-controller-system
